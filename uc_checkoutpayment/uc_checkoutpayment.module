<?php

/**
 * @file
 * Checkout.com integration module.
 *
 * This module provides Checkout.com payment gateway integration to Ubercart,
 * Ubercart Checkoutpayment offers a PCI-compliant way to process payments.
 */

/**
 * Constants declarations.
 */
const CHECKOUT_API_RESPONSE_CODE_APPROVED      = 10000;
const CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK = 10100;
const CHECKOUT_API_PLUGIN_VERSION              = '7.x-2.10';
const HOSTED_URL_SANDOX                        = 'https://secure.checkout.com/sandbox/payment/';
const HOSTED_URL_LIVE                          = 'https://secure.checkout.com/payment/';
const FRAMES_JS_URL                            = 'https://cdn.checkout.com/js/frames.js';
const HUB_URL                                  = 'https://hub.checkout.com/';
const GITHUB_WIKI_URL                          = 'https://github.com/checkout/checkout-ubercart-module/wiki';
const WEBHOOKS_URL                             = 'checkoutpayment/webhook';
const REDIRECT_URL                             = 'checkoutpayment/process';
const SUCCESS_URL                              = 'checkoutpayment/success';
const CANCEL_URL                               = 'checkoutpayment/fail';
const AJAX_URL                                 = 'checkoutpayment/ajax';
const EVENT_TYPE_CHARGE_SUCCEEDED              = 'charge.succeeded';
const EVENT_TYPE_CHARGE_CAPTURED               = 'charge.captured';
const EVENT_TYPE_CHARGE_REFUNDED               = 'charge.refunded';
const EVENT_TYPE_CHARGE_VOIDED                 = 'charge.voided';
const EVENT_TYPE_INVOICE_CANCELLED             = 'invoice.cancelled';

module_load_include('php', 'uc_checkoutpayment', 'includes/Methods/objects');

/**
 * Implements hook_menu().
 */
function uc_checkoutpayment_menu() {
  $items = array();

  $items[WEBHOOKS_URL] = array(
    'title' => 'Ipn checkout',
    'page callback' => 'uc_checkoutpayment_process_order',
    /* Access neccecary for webhooks */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[AJAX_URL] = array(
    'title' => 'Admin ajex call',
    'page callback' => 'uc_checkoutpayment_admin_call',
    /* Access neccecary for AJAX request */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[SUCCESS_URL] = array(
    'title' => 'Success page',
    'page callback' => 'uc_checkoutpayment_success_order',
    /* Redirect costumers to this address when the charge request has been succesfull */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[REDIRECT_URL] = array(
    'title' => 'Create Order page',
    'page callback' => 'uc_checkoutpayment_process_charge',
    /* Redirect costumers to this address when processing the card entry */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[CANCEL_URL] = array(
    'title' => 'Fail Order page',
    'page callback' => 'uc_checkoutpayment_fail_order',
    /* Redirect costumers to this address when the charge request has failed */
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function uc_checkoutpayment_init() {
  global $conf;
  $conf['i18n_variables'][] = 'uc_checkoutpayment_method_title';
  $conf['i18n_variables'][] = 'uc_checkoutpayment_checkout_button';
}

/**
 * Implements hook_variable_info().
 */
function uc_checkoutpayment_variable_info() {
  $variable['uc_checkoutpayment_method_title'] = array(
    'title' => t('Checkout.com - method title'),
    'description' => t('Name for Checkout.com payment method presented to the customer.'),
  );
  $variable['uc_checkoutpayment_checkout_button'] = array(
    'title' => t('Checkout.com - checkout button'),
    'description' => t('Text on checkout button when paying via Checkout.com.'),
  );

  return $variable;
}

/**
 * Implements hook_page_build().
 */
function uc_checkoutpayment_page_alter(&$page) {
  $pathElements = explode('/', current_path());

  if (
    empty(variable_get('cko_private_key')) || empty(variable_get('cko_public_key'))
  ) {
    drupal_set_message(
      t('The Checkout.com payment method is not configured correctly.') . l(' Click here to configure the method.', 'admin/store/settings/payment/method/cko'),
      'warning'
    );
  }

  if (
    (
      count($pathElements) == 5 && 
      $pathElements[0] == 'admin' && 
      $pathElements[1] == 'store' && 
      $pathElements[2] == 'orders' && 
      $pathElements[4] == 'edit'
    ) ||
    (
      count($pathElements) == 3 && 
      $pathElements[0] == 'cart' && 
      $pathElements[1] == 'checkout' && 
      $pathElements[2] == 'review' && 
      variable_get('cko_integration') == 'embedded'
    )
  ) {
    global $base_url;
    $path = $base_url . '/' . drupal_get_path('module', 'uc_checkoutpayment');
    drupal_add_js(
      FRAMES_JS_URL,
      array(
        'type' => 'external',
        'scope' => 'header',
      )
    );
    drupal_add_js(
      $path . "/includes/Methods/js/orderDetails.js",
      array(
        'type' => 'file',
        'scope' => 'footer',
      )
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function uc_checkoutpayment_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;

  switch ($form_id) {
    case 'uc_cart_checkout_review_form':
      if (($order_id = (int) $_SESSION['cart_order']) > 0) {
        $order = uc_order_load($order_id);
        $_SESSION['cko_contextid'] = $order_id;
    
        if ($order->payment_method == 'cko') {
          $cko_integration = cko_store_settings()['settings']['cko_integration'];
          $action = $base_url . '/' . REDIRECT_URL;
    
          switch ($cko_integration) {
            case 'hosted':
              unset($form['actions']['submit']);
              $form['#prefix'] = '<table style="border: none;">
                <tr class="review-button-row-inner"><td>';
              $preparedForm = drupal_get_form('uc_checkoutpayment_form', $order);
              $form['#suffix'] = '</td><td>' . drupal_render($preparedForm) . '</td></tr></table>';
              break;
    
            case 'embedded':
              unset($form['actions']['submit']);
              $form['#prefix'] = '
              <form id="payment-form" method="POST" action="' . $action . '"><table style="border: none;">
              <tr><td colspan="2" style="border: none;">
              <div class="frames-container"></div>
              
              </td></tr>
              <tr class="review-button-row-inner" style="border: none;"><td style="border: none;">';
              $form['#suffix'] = '
                <input id="pay-now-button" class="form-submit" type="submit" disabled value="' . cko_store_settings()['settings']['button_label'] . '"
                </input></td></tr></table>' . get_payment_frames() . '</form>';
              break;
    
            default:
              unset($form['actions']['submit']);
              $form['#prefix'] = '<table style="border: none;">
                <tr><td colspan="2" style="border: none;"> ' . checkout_payment_widget($order) . ' </td></tr>
                <tr class="review-button-row-inner"><td style="border: none;">';
              $form['#suffix'] = '</td></tr></table>';
              break;
          }
        }
      }
      break;
    
    case 'uc_order_edit_form':
      if ($form_state['order']->order_status == 'pending') {
        $form['#submit'][] = 'process_moto_submit';
        $form['#validate'][] = 'process_moto_validate';
    
        if (key($form['payment']['payment_method']['#options']) == 'cko') {
          $form['payment']['payment_method']['#options'] = array_reverse($form['payment']['payment_method']['#options']);
        }
    
        $form['payment']['payment_card_token'] = array(
          '#type' => 'hidden',
          '#default_value' => 'test',
          '#attributes' => array(
            'name' => array('payment_card_token'),
            'id' => array('payment_card_token'),
          ),
        );
    
        $form['#suffix'] = '
          <div id="cko-paymentpopup" class="order-pane  hidden">
            <p class="order-pane-title">Add card details:</p>
            <form id="payment-form" method="POST" action="' . $base_url . '/' . REDIRECT_URL . '">
              <table style="border: none;">
                <tr>
                  <td colspan="2" style="border: none;">
                    <div class="frames-container">
                    </div>
                  </td>
                </tr>
                <tr class="button-row" style="border: none;">
                  <td style="border: none;">
                    <a id="cancel" class="form-submit" onclick="ckoHidePane()">hide</a> 
                    <input id="pay-now-button" type="submit" class="form-submit" disabled value="Save card" />
                    <p id="cko-success" class="hidden"> The card is validated and saved. </p>
                  </td>
                </tr>
              </table>
            ' . get_payment_frames(array('submit_form' => FALSE, 'js_function' => 'ckoAddCardTokenToForm')) . '
          </form>
         </div>';
      }
      return $form;
      break;
  }
}

/**
 * Implements hook_help().
 */
function uc_checkoutpayment_help($path, $arg) {
  switch ($path) {
    case 'admin/help#uc_checkoutpayment':
      ob_start();
      include 'includes/help.page.inc';
      $html = ob_get_clean();
      ob_end_flush();
      return $html;
  }
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_checkoutpayment_uc_payment_method() {
  $methods[] = array(
    'id' => 'cko',
    'name' => t('Checkout.com'),
    'title' => variable_get('uc_checkoutpayment_method_title',
    t('Credit / Debit cards (Checkout.com)')),
    'desc' => t('Redirect to Checkout.com to pay.'),
    'callback' => 'uc_payment_method_checkoutpayment',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_payment_method_callback().
 */
function uc_payment_method_checkoutpayment($op, &$order) {
  global $base_url;

  module_load_include('module', 'uc_credit', 'uc_credit');
  $settings = cko_store_settings()['settings'];

  switch ($op) {
    case 'settings':
      $form['checkoutpayment_help_text'] = array(
        '#markup' => '
        <div class="help">
          <h4>
            <i class="cko-logo"></i><b>Checkout</b>.com
            <strong>
              ' . t('Payment Settings') . '
            </strong>
          </h4>
          <p>
            ' . t('Go to ') . l('the hub', HUB_URL) . t(' to find your channel credentials or go to the ') . l('GitHub wiki page', GITHUB_WIKI_URL) . t(' for more information on the installation process of this module.') . 
          '</p>
        </div>',
      );

      $form['checkoutpayment_account'] = array(
        '#type' => 'fieldset',
        '#title' => t('Channel settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['checkoutpayment_account']['cko_private_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account secret api key to use .'),
        '#default_value' => $settings['private_key'],
      );

      $form['checkoutpayment_account']['cko_public_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Public Key'),
        '#required' => TRUE,
        '#description' => t('The Checkout.com account publishable api key to use.'),
        '#default_value' => $settings['public_key'],
      );

      $form['checkoutpayment_account']['cko_webhook_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Webhook shared private key'),
        '#description' => t('The private shared key to check that the message comes from Checkout.'),
        '#default_value' => $settings['webhook_key'],
      );

      $form['checkoutpayment_account']['cko_mode'] = array(
        '#type' => 'select',
        '#title' => t('Endpoint Url Mode'),
        '#description' => t('Perform transactions on the production server or on the testing server.'),
        '#default_value' => $settings['mode'],
        '#options' => array(
          'live' => t('Live'),
          'sandbox' => t('Sandbox'),
        ),
      );

      $form['checkoutpayment_transaction'] = array(
        '#type' => 'fieldset',
        '#title' => t('Payment settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['checkoutpayment_transaction']['cko_payment_action'] = array(
        '#type' => 'select',
        '#title' => t('Transaction Method'),
        '#description' => t('The processing method to use for each transaction.'),
        '#default_value' => $settings['payment_action'],
        '#options' => array(
          UC_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
          UC_CREDIT_AUTH_ONLY => t('Authorization only (requires manual capture after checkout)'),
        ),
      );

      $form['checkoutpayment_transaction']['cko_autocaptime'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway auto capture time.'),
        '#description' => t('Set how long will the payment be capture.'),
        '#default_value' => $settings['autocaptime'],
      );

      $form['checkoutpayment_transaction']['cko_paymentMode'] = array(
        '#type' => 'select',
        '#title' => t('Payment Mode'),
        '#options' => array(
          'cards' => t('Card'),
          'localpayments' => t('Local Payment'),
          'mixed' => t('Mixed'),
        ),
        '#default_value' => $settings['paymentMode'],
      );

      $form['checkoutpayment_transaction']['cko_is3D'] = array(
        '#type' => 'select',
        '#title' => t('Enable 3D'),
        '#description' => t('If you want to process all transactions as 3D secure, select Yes'),
        '#options' => array(
          '1' => t('No'),
          '2' => t('Yes'),
        ),
        '#default_value' => $settings['is3D'],
      );

      $form['checkoutpayment_transaction']['cko_timeout'] = array(
        '#type' => 'textfield',
        '#title' => t('Set Gateway timeout.'),
        '#description' => t('Set how long request timeout on server.'),
        '#default_value' => $settings['timeout'],
      );

      $form['checkoutpayment_transaction']['cko_completeStatus'] = array(
        '#type' => 'select',
        '#title' => t('Complete status'),
        '#description' => t('This is the order status we will assign when an order has been paid.'),
        '#options' => array(
          'payment_received' => t('Payment received'),
          'completed' => t('Completed'),
        ),
        '#default_value' => $settings['completeStatus'],
      );

      $form['checkoutpayment_ui'] = array(
        '#type' => 'fieldset',
        '#title' => t('Personalisation settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['checkoutpayment_ui']['cko_integration'] = array(
        '#type' => 'select',
        '#title' => t('Integration method'),
        '#description' => t('Choose how you will integrate our service.'),
        '#options' => array(
          'hosted' => t('Hosted'),
          'lightbox' => t('Lightbox | CheckoutJS'),
          'embedded' => t('Embedded | Checkout Frames (Cards only)'),
        ),
        '#default_value' => $settings['cko_integration'],
      );

      $form['checkoutpayment_ui']['cko_render_mode'] = array(
        '#type' => 'select',
        '#title' => t('Lightbox Render Mode'),
        '#description' => t('Choose how the Lightbox will be rendered on the review page.'),
        '#options' => array(
          0 => t('Icons and Pay Button'),
          1 => t('Pay Button only'),
          3 => t('Active Icons only'),
        ),
        '#default_value' => $settings['cko_render_mode'],
      );

      $form['checkoutpayment_ui']['cko_logourl'] = array(
        '#type' => 'textfield',
        '#title' => t('Logo URL'),
        '#description' => t('This is the setting to display the logo on checkout.js (Max size: 180 x 36)'),
        '#default_value' => $settings['logourl'],
      );

      $form['checkoutpayment_ui']['cko_themecolor'] = array(
        '#type' => 'textfield',
        '#title' => t('Theme color'),
        '#description' => t('Set theme color for checkout hosted'),
        '#default_value' => $settings['themecolor'],
      );

      $form['checkoutpayment_ui']['cko_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('Add a title on the hosted payment page'),
        '#default_value' => $settings['title'],
      );

      $form['checkoutpayment_ui']['cko_subtitle'] = array(
        '#type' => 'textfield',
        '#title' => t('Subtitle'),
        '#description' => t('Add a subtitle on the hosted payment page'),
        '#default_value' => $settings['subtitle'],
      );

      $form['checkoutpayment_ui']['cko_button_label'] = array(
        '#type' => 'textfield',
        '#title' => t('Button label'),
        '#description' => t('Change the button label on the hosted payment page'),
        '#default_value' => $settings['button_label'],
      );

      $form['checkoutpayment_ui']['cko_language'] = array(
        '#type' => 'select',
        '#title' => t('Language'),
        '#description' => t('Change the language of the checkout hosted page'),
        '#options' => array(
          'DE-DE' => t('German'),
          'NL-NL' => t('Dutch'),
          'FR-FR' => t('French'),
          'KR-KR' => t('Korean'),
          'IT-IT' => t('Italian'),
          'EN-GB' => t('English'),
        ),
        '#default_value' => $settings['cko_language'],
      );

      $form['checkoutpayment_ui']['cko_currencycode'] = array(
        '#type'        => 'select',
        '#title'       => t('Widget currency format'),
        '#description' => t('Display currency code or currency symbol on the checkout hosted'),
        '#options'     => array(
          'true'  => t('Code'),
          'false' => t('Symbol'),
        ),
        '#default_value' => $settings['currencycode'],
      );

      $form['checkoutpayment_sync'] = array(
        '#type' => 'fieldset',
        '#title' => t('Syncronisation settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['checkoutpayment_sync']['cko_from_date'] = array(
        '#type' => 'textfield',
        '#title' => t('Start of the time range.'),
        '#description' => t('Beginning of required date range in UTC format. If omitted, the default value will be set to 2 days prior to today’s date.'),
        '#default_value' => gmdate('Y-m-d\TH:i:s\Z', strtotime("-2 day")),
      );

      $form['checkoutpayment_sync']['cko_to_date'] = array(
        '#type' => 'textfield',
        '#title' => t('End of the time range.'),
        '#description' => t('End of required date range in UTC format. If omitted, the default value will be set to today’s date.'),
        '#default_value' => gmdate('Y-m-d\TH:i:s\Z'),
      );

      $form['checkoutpayment_sync']['cko_syncronise'] = array(
        '#type' => 'button',
        '#action' => 'syncronise',
        '#value'  => t('Syncronise'),
        '#ajax' => array(
          'callback' => 'reloadHubCommunicationTableWithTimeRange',
          'wrapper' => 'replace_synconisation_respons',
         ),
      );

      $form['checkoutpayment_sync']['cko_syncronise_repsons'] = array(
        '#markup' => '',
        '#prefix' => '<div id="replace_synconisation_respons">',
        '#suffix' => '</div>',
      );

      return $form;

    case 'order-view':
      return drupal_get_form('admin_order_payment_action_form', $order);

    case 'order-details':
      $charge = new Charge($order->order_id);
      if (empty($charge->status) || $charge->status == "Declined") {
        $form['cko-link'] = array(
          '#type'  => 'markup',
          '#markup' => '<a href="javascript:void(0)" onclick="ckoShowPane()" id="cko-link">Add card details</a>',
        );
        return $form;
      }
      else {
        $form['cko-error'] = array(
          '#type'  => 'markup',
          '#markup' => '<p class="error">The payment settings aren\'t setup properly.</p>',
        );
      }
    default:
      return NULL;
  }
}

/**
 * @todo change name to cko_admin_moto_validate
 *
 * Implements hook_form_validate() for the admin edit order form.
 */
function process_moto_validate(&$elements, &$form_state, $form_id = NULL) {
  if ($form_state['values']['payment_method'] == "cko" && $form_state['triggering_element']["#value"] == "Submit changes") {

    if (!valid_email_address($form_state['values']['primary_email'])) {
      form_set_error("primary_email", t("A valid e-mail address is nessesary for payments through Checkout.com."));
    }

    if (substr($form_state['values']['payment_card_token'], 0, 9) != "card_tok_") {
      form_set_error("payment_card_token", t("The card token is not valid."));
    }
  }
}

/**
 * @todo change name to cko_admin_moto_submit
 *
 * Implements hook_form_submit() for the admin edit order form.
 */
function process_moto_submit($form, &$form_state) {
  if ($form_state['values']['payment_method'] == "cko" && $form_state['triggering_element']["#value"] == "Submit changes") {
    $config = array(
      'order_id' => $form_state['values']['order_id'],
      'card_token' => $form_state['values']['payment_card_token'],
      'transaction_indicator' => 3,
    );
    uc_checkoutpayment_process_charge($config);
  }
}

/**
 * AJAX call to synronise the database with the hub.
 *
 * @todo change name to cko_admin_syncronise_databases
 *
 * @param form $form
 *   The settings form.
 * @param form_state $form_state
 *   The settings form state.
 */
function reloadHubCommunicationTableWithTimeRange($form, $form_state) {
  $payment_method = cko_store_settings();
  $instance = uc_checkoutpayment_get_instance();

  $config = array(
    'privateKey' => $payment_method['settings']['private_key'],
  );

  if (isset($form_state['values']['cko_from_date']) && isset($form_state['values']["cko_to_date"])) {
    $config['FromDate'] = $form_state['values']['cko_from_date'];
    $config['ToDate'] = $form_state['values']['cko_to_date'];
  }

  $config['message'][] = 'All the charges have been syncronised.';

  $instance->reloadHubCommunicationTable($config);

  module_invoke_all('cko_syncronise', $config);
  drupal_alter('cko_syncronise', $config);

  $fullmessage = "Syncronisation";

  foreach ($config['message'] as $message) {
    $fullmessage .= ' | ' . $message;
  }

  return $form['checkoutpayment_sync']['cko_syncronise_repsons']['#markup'] = $fullmessage;
}

/**
 * @todo rename to cko_admin_payment_action_form
 * 
 * Implements hook_form().
 */
function admin_order_payment_action_form($form, &$form_state, $order) {
  global $base_url;

  $charge = new Charge($order->order_id);

  if ($charge !== NULL) {
    $actions = array();

    $actions[] = array(
      'action' => 'syncronise',
      'label'  => t('Refresh'),
      'help'   => t('Updates database via <i class="cko-logo"></i><b>Checkout</b>.com server'),
    );

    // Payment was flagged.
    if ($charge->responseCode == "10100") {
      drupal_set_message(t('This payment is flagged.'), 'warning');
    }

    // Last payment action failed.
    if (strpos($charge->status, "failed")) {
      drupal_set_message(t('The @status. Please try again later.', array('@status' => $charge->status)), 'error');
    }

    // Find possible actions fot the payment.
    if ($charge->status == "Refunded" && $charge->value == $order->order_total * 100) {
      drupal_set_message(t('The order has been fully refunded'), 'status');
    }
    elseif ($charge->status == "Refunded" || $charge->status == "Captured" || $charge->status == "Refund failed") {
      if ($charge->status == "Refunded") {
        drupal_set_message(t('The order has been partially refunded'), 'warning');
      }

      $actions[] = array(
        'action' => 'refund',
        'label'  => t('Fully refund this order.'),
      );
    }
    elseif ($charge->status == "Authorised" || $charge->status == "Capture failed" || $charge->status == "Void failed" || $charge->status == "Flagged") {
      $actions[] = array(
        'action' => 'capture',
        'label'  => t('Capture this payment.'),
      );
      $actions[] = array(
        'action' => 'cancel',
        'label'  => t('Cancel this payment.'),
      );
    }

    // Add the order id for later referance.
    $form['order_id'] = array(
      '#type'       => 'hidden',
      '#value'      => $order->order_id,
      '#attributes' => array(
        'id' => 'order_id',
      ),
    );

    // Create all buttons.
    foreach ($actions as $action) {
      $form[$action['action']] = array(
        '#type'  => 'submit',
        '#value' => $action['label'],
        '#name'  => $action['action'],
        '#attributes' => array(
          'id' => 'cko-payment-action',
        ),
      );

      if (array_key_exists('help', $action)) {
        $form[$action['action']]['#suffix'] = '
          <div class="tooltip">?
            <span class="tooltiptext">' . $action['help']. '</span>
          </div>';
      }
    }
  }
  else {
    drupal_set_message(t('No payment details were found for this order.'), 'error');
  }

  $path = $base_url . '/' . drupal_get_path('module', 'uc_checkoutpayment');
  drupal_add_js(
    $path . "/includes/Methods/js/adminRefresh.js",
    array(
      'type' => 'file',
      'scope' => 'footer',
    )
  );

  return $form;
}

/**
 * @todo rename to cko_admin_payment_action_form_submit
 *
 * Implements hook_form_sumbit().
 */
function admin_order_payment_action_form_submit($form, &$form_state) {
  $values   = $form_state['values'];
  $order_id = $values['order_id'];

  $payment_method = cko_store_settings();
  $instance = uc_checkoutpayment_get_instance();

  $order  = uc_order_load($order_id);
  $charge = new Charge($order_id);
  $response = NULL;

  if ($form_state['triggering_element']["#name"] == "syncronise") {
    $config = array(
      'privateKey' => $payment_method['settings']['private_key'],
      'trackId' => (string) $order_id,
    );

    $instance->reloadHubCommunicationTable($config);
    drupal_set_message(t("The payment was syncronized with <i class='cko-logo'></i><b>Checkout</b>.com"), 'status');
  }
  if ($charge->status == "Authorised" || $charge->status == "Capture failed" || $charge->status == "Flagged") {
    if ($form_state['triggering_element']["#name"] == "capture") {
      $response = $instance->captureCharge($order, $payment_method, ($order->order_total * 100));
      drupal_set_message(t("The payment was captured."), 'status');
    }
    if ($form_state['triggering_element']["#name"] == "cancel") {
      $response = $instance->cancelCharge($order, $payment_method, ($order->order_total * 100));
      drupal_set_message(t("The payment was voided."), 'status');
    }
  }
  elseif ($charge->status == 'Captured' && $form_state['triggering_element']["#name"] == "refund") {
    $amount = $order->order_total - uc_payment_balance($order);
    $response = $instance->refundCharge($order, $payment_method, ($amount * 100));
    drupal_set_message(t("The payment was refunded."), 'status');
  }

  if ($response === NULL) {
    return FALSE;
  }

  drupal_json_output(TRUE);
}

/**
 * AJAX call to check if the order status has been changed.
 *
 * @param string $action
 *   The action we are waiting for.
 * @param int $contextId
 *   The id of the order.
 */
function uc_checkoutpayment_admin_call($action, $contextId = 0) {
  $charge = new Charge($contextId);

  switch ($action) {
    case 'capture':
      $response = $charge->status == 'Captured';
      break;

    case 'refund':
      $response = $charge->status == 'Refunded';
      break;

    case 'cancel':
      $response = $charge->status == 'Voided';
      break;

    default:
      $response = FALSE;
  }

  drupal_json_output($response);
}

/**
 * Hidden from elements on the review page to POST to CKO hosted page.
 *
 * @param array $form
 *   Drupal form.
 * @param array $form_state
 *   Drupal form state.
 * @param object $order
 *   Ubercart order.
 *
 * @return array
 *   The drupal form array.
 */
function uc_checkoutpayment_form(array $form, array &$form_state, $order) {
  global $base_url;

  $payment_method = cko_store_settings();
  $settings       = $payment_method['settings'];

  $instance = uc_checkoutpayment_get_instance();
  $data     = $instance->getExtraInit($order, $payment_method);

  // Settings.
  $hppUrl       = $settings['mode'] == 'sandbox' ? HOSTED_URL_SANDOX : HOSTED_URL_LIVE;
  $publicKey    = $settings['public_key'];
  $paymentMode  = $settings['paymentMode'];
  $themeColor   = $settings['themecolor'];
  $title        = $settings['title'];
  $logoUrl      = $settings['logourl'];
  $currencycode = $settings['currencycode'];
  $subtitle     = $settings['subtitle'];
  $buttonLabel  = $settings['button_label'];
  $cko_language = $settings['cko_language'];

  $cardFormMode = "cardTokenisation";
  $redirectUrl  = $base_url . '/' . REDIRECT_URL;
  $cancelUrl    = $base_url . '/' . CANCEL_URL;

  // Order details.
  $contextId     = $order->order_id;
  $paymentToken  = $data['script']['paymentToken'];
  $customerEmail = $data['script']['email'];
  $value         = $data['script']['amount'];
  $currency      = $data['script']['currency'];

  $billingDetails = '{
    "addressLine1":"' . $order->billing_street1 . '",
    "addressLine2":"' . $order->billing_street2 . '",
    "postcode":"    ' . $order->billing_postal_code . '",
    "country":"     ' . uc_get_country_data(array('country_id' => $order->billing_country))[0]['country_iso_code_2'] . '",
    "city":"        ' . $order->billing_city . '",
    "state":"       ' . $order->billing_zone . '"
  }';

  // Format data for form.
  $data = array(
    'publicKey'       => $publicKey,
    'paymentToken'    => $paymentToken,
    'customerEmail'   => $customerEmail,
    'value'           => $value,
    'currency'        => $currency,
    'cardFormMode'    => $cardFormMode,
    'paymentMode'     => $paymentMode,
    'redirectUrl'     => $redirectUrl,
    'cancelUrl'       => $cancelUrl,
    'contextId'       => $contextId,
    'themeColor'      => $themeColor,
    'title'           => $title,
    'logoUrl'         => $logoUrl,
    'billingDetails'  => $billingDetails,
    'localisation'    => $cko_language,
    'subtitle'        => $subtitle,
    'buttonLabel'     => $buttonLabel,
    'useCurrencyCode' => $currencycode,
  );

  // Set form objects.
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array(
        '#type' => 'hidden',
        '#value' => $value,
        '#attributes' => array(
          'name' => array($name),
        ),
      );
    }
  }

  // Set submit button.
  $form['#action'] = url($hppUrl);
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get(
      'uc_checkoutpayment_checkout_button',
      'Proceed with payment'
    ),
  );

  return $form;
}

/**
 * Createn of JS widget for the form.
 *
 * @param object $order
 *   A Ubercart order object.
 *
 * @return string
 *   returns the html form element.
 */
function checkout_payment_widget($order) {
  $payment_method = cko_store_settings();
  $instance = uc_checkoutpayment_get_instance();

  module_invoke_all('cko_widget', $order, $payment_method);
  drupal_alter('cko_widget', $order, $payment_method);

  return $instance->getWidgetElement($order, $payment_method);
}

/**
 * Createn of JS widget for the form.
 *
 * The simplest usage would be:
 *   get_payment_frames();
 *
 * More advaced usage could be:
 *   $config = array(
 *     'submit_form' => FALSE,
 *     'js_function' => 'myCustomJavascriptAction'
 *   );
 *   get_payment_frames($config);
 *
 *   This will call the function myCustomJavascriptAction(cardToken).
 *
 * @param array $config
 *   Configuration settings for the frames element.
 *
 * @return string
 *   returns the html form element.
 */
function get_payment_frames(array $config = array()) {
  $config = array_merge($config, cko_store_settings());
  $instance = uc_checkoutpayment_get_instance();
  return $instance->getFramesElement($config);
}

/**
 * Processes card payment after validation by CKO.
 *
 * This page is called after entering the card details in our system.
 * Checks the card details and will redirect accordingly.
 *
 * Simple usage:
 *   $details = array(
 *     'method' => 'cardId' | 'cardToken' | 'customerId' | 'customerEmail',
 *     ['cardId' => 'card_00000000-0000-0000-0000-000000000000'],
 *     ['cardToken' => 'card_tok_00000000-0000-0000-0000-000000000000'],
 *     ['customerId' => 'cust_00000000-0000-0000-0000-000000000000'],
 *     ['customerEmail' => 'integration@checkout.com'],
 *     ['moto' => true],
 *     ['zeroDollarAuth' => true],
 *   )
 *   cko_processing($order, $details);
 *
 * @return array
 *   redirect to succes, fail, or 3D Secure page.
 */
function cko_processing($order, array $details = array()) {
  if (empty($order) || empty($details) || !array_key_exists('method', $details)) {
    return FALSE;
  }
  
  if($order->order_status != 'in_checkout'){
    return false;
  }

  //region Set default parameters
  if (array_key_exists('zeroDollarAuth', $details) && $details['zeroDollarAuth']) {
    $config = array(
      'authorization' => variable_get('cko_private_key'),
      'mode'          => variable_get('cko_mode'),
      'postedParam'   => array(
        'autoCapture'  => CheckoutapiClientConstant::AUTOCAPUTURE_AUTH,
        'trackId'      => 'Zero Dollar Authorisation',
        'value'        => 0,
        'currency'     => 'USD',
        'email'        => $order->primary_email,
        'customerName' => $order->billing_first_name . ' ' . $order->billing_last_name,
      ),
    );
  }
  else {
    $payment_method = cko_store_settings();
    $instance = uc_checkoutpayment_get_instance();
    $data = $instance->getExtraInit($order, $payment_method);

    $autoCapture = $payment_method['settings']['payment_action'] == 'authorize' ? CheckoutapiClientConstant::AUTOCAPUTURE_AUTH : CheckoutapiClientConstant::AUTOCAPUTURE_CAPTURE;

    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
      $ip = $_SERVER['HTTP_CLIENT_IP'];
    }
    elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
      $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
    }
    else {
      $ip = ip_address();
    }

    $config = array(
      'authorization' => variable_get('cko_private_key'),
      'mode'          => variable_get('cko_mode'),
      'postedParam' => array(
        'trackId'              => $order->order_id,
        'value'                => $data['script']['amount'],
        'currency'             => $data['script']['currency'],
        'autoCapture'          => $autoCapture,
        'chargeMode'           => $payment_method['settings']['is3D'],
        'customerIp'           => $ip,
        'autoCapTime'          => $payment_method['settings']['autocaptime'],
        'email'                => $order->primary_email,
        'customerName'         => $order->billing_first_name . ' ' . $order->billing_last_name,
        'billingDetails'       => $data['script']['billingDetails'],
        'shippingDetails'      => $data['script']['shippingDetails'],
        'transactionIndicator' => 1,
        'metadata'             => array(
          'server'           => $_SERVER['HTTP_USER_AGENT'],
          'plugin_version'   => CHECKOUT_API_PLUGIN_VERSION,
          'lib_version'      => CheckoutapiClientConstant::VERSION,
          'integration_type' => $payment_method['settings']['cko_integration'],
          'time'             => date('Y-m-d H:i:s'),
          'instanceId'       => $order->order_id,
        ),
      )
    );

    if (!empty($data['script']['products'])) {
      $config['postedParam']['products'] = $data['script']['products'];
    }
  }
  //endregion

  //region Select transaction method.
  if (array_key_exists('moto', $details) && $details['moto']) {
    $config['postedParam']['transactionIndicator'] = 3;
  }
  //endregion

  //region Select processing method.
  if (array_key_exists('cardId', $details)) {
    $config['postedParam']['cardId'] = $details['cardId'];
  }
  elseif (array_key_exists('cardToken', $details)) {
    $config['postedParam']['cardToken'] = $details['cardToken'];
  }
  elseif (array_key_exists('customerId', $details)) {
    $config['postedParam']['customerId'] = $details['customerId'];
  }
  elseif (array_key_exists('customerEmail', $details)) {
    $config['postedParam']['customerEmail'] = $details['customerEmail'];
  }
  else {
    return FALSE;
  }
  //endregion

  // Invoke hook_cko_processing_alter().
  if (!array_key_exists('zeroDollarAuth', $details) || !$details['zeroDollarAuth']) {
    module_invoke_all('cko_processing', $order, $config);
    drupal_alter('cko_processing', $order, $config);
  }

  //region Create a charge request.
  $api = CheckoutapiApi::getapi(array('mode' => variable_get('cko_mode')));
  $result = $api->createCharge($config);
  //endregion

  //region Handle Api response.
  if ($api->getExceptionstate()->hasError() || !$result->isValid() || !response_validation($result)) {
    watchdog(
      'uc_checkoutpayments',
      'An error has occurred while processing a transaction. The api returned: %errorMessage',
      array(
        '%errorMessage' => $api->getExceptionstate()->getErrorMessage(),
      ),
      WATCHDOG_ERROR
    );

    if (array_key_exists('moto', $details) && $details['moto']) {
      drupal_set_message(t("The card was declined, please try again."), 'error');
      return FALSE;
    }
    return FALSE;
  }

  if (!empty($result->getRedirectUrl())) {
    uc_order_update_status($order->order_id, 'processing');
    drupal_goto($result->getRedirectUrl());
  }

  return $result;
  //endregion
}

/**
 * Processes card payment after validation by CKO.
 *
 * This page is called after entering the card details in our system.
 * Checks the card details and will redirect accordingly.
 *
 * Simple usage:
 *   $config = array(
 *     'order_id' => 1,
 *     'card_token' => 'card_tok_86A6C264-8B87-45FA-AD91-4455A75B0361',
 *     'transaction_indicator' => 3,
 *   )
 *   uc_checkoutpayment_process_charge($config);
 *
 * @return array
 *   redirect to succes, fail, or 3D Secure page.
 */
function uc_checkoutpayment_process_charge(array $config = array()) {
  $moto = false;
  
  if ($_SESSION['cko_contextid'] === NULL && $config === NULL) {
    drupal_goto();
  }
  elseif (!empty($config) && array_key_exists('order_id', $config)) {
    $order = uc_order_load($config['order_id']);

    if (array_key_exists('card_token', $config)) {
      $details['method'] = 'cardToken';
      $details['cardToken'] = $config['card_token'];
    }

    if (array_key_exists('transaction_indicator', $config) && $config['transaction_indicator'] == 3) {
      $details['moto'] = true;
      $moto = true;
    }
  }
  else {
    $order = uc_order_load($_SESSION['cko_contextid']);

    if (isset($_REQUEST['cko-card-token'])) {
      $details['method'] = 'cardToken';
      $details['cardToken'] = $_REQUEST['cko-card-token'];
    }
  }

  $result = cko_processing($order, $details);

  if ($result === FALSE && $moto) {
    return FALSE;
  }
  elseif ($result === FALSE) {
    return uc_checkoutpayment_fail_order();
  }
  else {
    return uc_checkoutpayment_success_order();
  }
}

/**
 * Verifies the response code from CKO.
 *
 * @param object $result
 *   Result object from the CKO response.
 *
 * @return bool
 *   returns TRUE if valid and FALSE if not valid.
 */
function response_validation($result) {
  $responseCode = (int) $result->getResponseCode();
  if ($responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED && $responseCode !== CHECKOUT_API_RESPONSE_CODE_APPROVED_RISK) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Redirect to success url: example.com/uc_checkoutpayment/success.
 */
function uc_checkoutpayment_success_order() {
  if ($_SESSION['cko_contextid'] !== NULL) {
    $order = uc_order_load($_SESSION['cko_contextid']);
  }
  else {
    drupal_goto();
  }

  $output = uc_cart_complete_sale($order);

  return $output;
}

/**
 * Redirect back to cart page with error message.
 */
function uc_checkoutpayment_fail_order() {
  if (!$_SESSION['cko_contextid']) {
    drupal_goto();
  }

  drupal_set_message(t("An error has occurred while processing your transaction. Please verify your information again or try a different card."), 'error');
  drupal_goto('cart/checkout/review');
}

/**
 * Webhook listener for CKO server.
 *
 * @return httpresponse
 *   Response to the CKO server.
 */
function uc_checkoutpayment_process_order() {
  $post_data = file_get_contents('php://input');

  if ($post_data) {
    $payment_method = cko_store_settings();

    // Check if the authentication is right.
    $headers = getallheaders();
    if ($headers['Authorization'] != $payment_method['settings']['webhook_key'] && $payment_method['settings']['webhook_key'] != "") {
      return http_response_code(400);
    }

    // Process the data.
    $jsondata = json_decode($post_data);
    $eventType = $jsondata->eventType;

    $cko_contextid = $jsondata->message->trackId;
    $order = uc_order_load($cko_contextid);

    $instance = uc_checkoutpayment_get_instance();
    $data     = $instance->getExtraInit($order, $payment_method);

    $api = CheckoutapiApi::getapi(array('mode' => $payment_method['settings']['mode']));
    $object_charge = $api->chargeToObj($post_data);

    if ($object_charge->isValid()) {
      uc_checkoutpayment_add_to_database($object_charge);

      module_invoke_all('cko_webhook', $object_charge);

      $order_total   = $data['script']['amount'] / 100;
      $order_balance = uc_payment_balance($order);

      if (strpos($eventType, ".failed")) {
        $commentary = t(
          '<span class="cko-warning">@responseMessage (@errorcode)</span> @errormessage (Id: @chargeId)',
          array(
            '@responseMessage' => $object_charge->getResponseMessage(),
            '@errorcode' => $object_charge->getResponseCode(),
            '@errormessage' => $object_charge->getResponseAdvancedInfo(),
            '@chargeId' => $object_charge->getId(),
          )
        );
        uc_order_comment_save($order->order_id, 0, $commentary, 'admin');
      }

      switch ($eventType) {
        case EVENT_TYPE_CHARGE_SUCCEEDED:
          uc_order_update_status($order->order_id, 'cko_authorised');

          if ($object_charge->getResponseCode() == 10100) {
            $commentary = t(
              'Payment authorised and flagged. (Id: @chargeId)',
              array(
                '@chargeId' => $object_charge->getId(),
              )
            );
            uc_order_comment_save($order->order_id, 0, $commentary, 'admin');
          }
          else {
            $commentary = t(
              'Payment authorised. (Id: @chargeId)',
              array(
                '@chargeId' => $object_charge->getId(),
              )
            );
            uc_order_comment_save($order->order_id, 0, $commentary, 'admin');
          }

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_CAPTURED:
          $captured = $object_charge->getValue() / 100;

          if ($captured == $order_balance) {
            if ($payment_method['settings']['completeStatus'] == 'payment_received') {
              uc_order_update_status($order->order_id, 'payment_received');
            }
            else {
              uc_order_update_status($order->order_id, 'completed');
            }
            
            $commentary = t('Payment received. (Id: @chargeId)',
              array(
                '@chargeId' => $object_charge->getId(),
              )
            );
          }
          elseif ($captured < $order_balance) {
            $commentary = t(
              'Partial payment received @captured received instead of @order_total. (Id: @chargeId)',
              array(
                '@chargeId' => $object_charge->getId(),
                '@captured' => uc_currency_format($captured), 
                '@order_total' => uc_currency_format($order_total),
              )
            );
            uc_order_update_status($order->order_id, 'cko_part_captured');
          }

          uc_order_comment_save($order->order_id, 0, $commentary, 'admin');
          uc_payment_enter($order->order_id, 'cko', $captured, 0, NULL, $commentary);

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_REFUNDED:
          $refunded = $object_charge->getValue() / 100;

          error_log('refunded: ' . $refunded . ' | order_balance: ' . $order_balance . ' | order_total: '. $order_total, 0);

          if ($refunded + $order_balance == $order_total) {
            $commentary = t('Payment fully refunded. (Id: @chargeId)',
              array(
                '@chargeId' => $object_charge->getId(),
              )
            );
            uc_order_update_status($order->order_id, 'cko_refunded');
          }
          elseif ($refunded + $order_balance < $order_total) {
            $commentary = t(
              'Partial refunded made: @refunded of @order_total. (Id: @chargeId)', 
              array(
                '@chargeId' => $object_charge->getId(),
                '@refunded' => uc_currency_format($refunded), 
                '@order_total' => uc_currency_format($order_total - $order_balance),
              )
            );
            uc_order_update_status($order->order_id, 'cko_part_refunded');
          }
          else {
            $commentary = t(
              'The payment was possibly refunded, go to The Hub or resync for the right information. (Id: @chargeId)', 
              array(
                '@chargeId' => $object_charge->getId(),
              )
            );
          }

          uc_order_comment_save($order->order_id, 0, $commentary, 'admin');
          uc_payment_enter($order->order_id, 'cko', -$refunded, 0, NULL, $commentary);

          return http_response_code(200);

        case EVENT_TYPE_CHARGE_VOIDED:
          $commentary = t('Payment voided. (Id: @chargeId)',
            array(
              '@chargeId' => $object_charge->getId(),
            )
          );
          uc_order_update_status($order->order_id, $commentary);
          uc_order_comment_save($order->order_id, 0, $commentary, 'admin');
          return http_response_code(200);

        case EVENT_TYPE_INVOICE_CANCELLED:
          $commentary = t('Payment cancelled. (Id: @chargeId)',
            array(
              '@chargeId' => $object_charge->getId(),
            )
          );
          uc_order_update_status($order->order_id, $commentary);
          uc_order_comment_save($order->order_id, 0, $commentary, 'admin');
          return http_response_code(200);

        default:
          return http_response_code(400);
      }
    }
  }

  return http_response_code(400);
}

/**
 * Adds an Checkout.com response object to the database.
 *
 * @param object $cko_charge
 *   A Checkout.com charge response object.
 */
function uc_checkoutpayment_add_to_database($cko_charge) {
  $charge = new charge(); 

  $charge->id = $cko_charge->getId();
  $charge->created = $cko_charge->getCreated();
  $charge->trackId = $cko_charge->getTrackId();
  $charge->email = $cko_charge->getEmail();
  $charge->value = $cko_charge->getValue();
  $charge->currency = $cko_charge->getCurrency();
  $charge->responseMessage = $cko_charge->getResponseMessage();
  $charge->responseCode = $cko_charge->getResponseCode();
  $charge->status = $cko_charge->getStatus();

  $charge->save();

}

/**
 * Implements hook_uc_payment_entered().
 */
function uc_checkoutpayment_uc_payment_entered($order, $method, $amount, $account, $data, $comment) {
  $payment_method = cko_store_settings();
  $instance = uc_checkoutpayment_get_instance();

  $payments = uc_payment_load_payments($order->order_id);
  $payed_amount = ($order->order_total - (uc_payment_balance($order) + $amount));

  if ($method == "cko" && $account->uid != "0" && $comment != "Automated balance restore") {
    $charge = new Charge($order->order_id);

    if ($amount > 0 && $charge->status != 'Captured') {
      uc_payment_enter($order->order_id, 'cko', -$amount, 0, NULL, t("Automated balance restore"));
      $instance->captureCharge($order, $payment_method, ($amount * 100));
    }
    elseif ($amount > 0) {
      uc_payment_delete(end($payments)->receipt_id);
      drupal_set_message(t("You cannot capture more than once."), 'error');
    }
    elseif (-$amount <= $payed_amount) {
      uc_payment_enter($order->order_id, 'cko', -$amount, 0, NULL, t("Automated balance restore"));
      $instance->refundCharge($order, $payment_method, ($amount * -100));
    }
    else {
      uc_payment_delete(end($payments)->receipt_id);
      drupal_set_message(t("You cannot refund more than you've received"), 'error');
    }
  }
}

/**
 * Method to return all cko settings.
 *
 * @return array
 *   An array with the CKO settings.
 */
function cko_store_settings() {
  $payment_method = array();

  if (empty(variable_get('cko_autocaptime'))) {
    variable_set('cko_autocaptime', 0);
  }

  if (variable_get('cko_integration') == 'embedded') {
    variable_set('cko_paymentMode', 'cards');
  }

  $payment_method['settings'] = array(
    'private_key'     => variable_get('cko_private_key', ''),
    'public_key'      => variable_get('cko_public_key', ''),
    'webhook_key'     => variable_get('cko_webhook_key', ''),
    'mode'            => variable_get('cko_mode', 'live'),
    'debugMode'       => variable_get('cko_debugMode', FALSE),
    'payment_action'  => variable_get('cko_payment_action', ''),
    'autocaptime'     => variable_get('cko_autocaptime', 0),
    'paymentMode'     => variable_get('cko_paymentMode', 'mixed'),
    'is3D'            => variable_get('cko_is3D', FALSE),
    'timeout'         => variable_get('cko_timeout', 60),
    'completeStatus'  => variable_get('cko_completeStatus', 'payment_received'),
    'logourl'         => variable_get('cko_logourl', ''),
    'themecolor'      => variable_get('cko_themecolor', ''),
    'title'           => variable_get('cko_title', variable_get('site_name', "Default site name")),
    'subtitle'        => variable_get('cko_subtitle', ''),
    'button_label'    => variable_get('cko_button_label', ''),
    'currencycode'    => variable_get('cko_currencycode', 'false'),
    'cko_language'    => variable_get('cko_language', 'EN-GB'),
    'cko_integration' => variable_get('cko_integration', 'lightbox'),
    'cko_render_mode' => variable_get('cko_render_mode', 0),
  );

  return $payment_method;
}

/**
 * Retrieves new instance of the creditcard class.
 *
 * @return object
 *   creditcard
 */
function uc_checkoutpayment_get_instance() {
  module_load_include('php', 'uc_checkoutpayment', 'includes/checkout-php-library/autoload');

  if (!in_array('Creditcard', get_declared_classes())) {
    require 'includes/Methods/Creditcard.php';
  }

  return new Creditcard;
}